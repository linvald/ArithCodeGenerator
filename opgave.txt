Exercises, Language engineering,  8 October 2003
 

 

1.     Take a grammar for arithmetic expressions.  Generate a parser producing a syntax tree using JTB+JavaCC.  

 

2.     Write a visitor that generates Java code that evaluates the expression.  The code should look something like this (sorry for the non- OO style of programming!).

 

public class  ArithExpr() {

 

    public static void evalExpr(Environment e) {

         // generate code to evaluate and print the given expression

    }

    public static Integer  lookup(Environment env, String x) {

         return env.get(x);}

}

 

The code to evaluate the given expression (the body of the evalExpr method)   should be generated by the visitor. Occurrences of variables should be replaced by a call to the lookup method.  For example, given the expression  2 * (x+4) – y, the code generated should be something like:

 

public class  ArithExpr() {

 

    public static void evalExpr(Environment e) {

         Integer result = 2 * (lookup(e, “x”) + 4) – lookup(e, “y”);

          System.out.println(result.toString());

    }

    public static Integer  lookup(Environment env, String x) {

         return env.get(x);}

}

 

3.     Try out the DOM API on any XML document you like.  Parse the document and print out the DOM tree nodes encountered in an inorder traversal.

 

 
